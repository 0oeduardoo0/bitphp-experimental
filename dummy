<?php

   require 'bitphp/autoload.php';
   
   use \Bitphp\Core\Trash;
   use \Bitphp\Core\Globals;
   use \Bitphp\Core\ErrorLogManager as Error;
   use \Bitphp\Base\CommandLine;
   use \Bitphp\Modules\Cli\Arguments;
   use \Bitphp\Modules\Cli\StandardIO;
   use \Bitphp\Modules\Utilities\TimeDiff;
   use \Bitphp\Modules\Utilities\File;
   use \Bitphp\Modules\Utilities\Random;
   use \Bitphp\Modules\Database\Migration;

   $cli = new CommandLine();

   $cli->doCommand('dummy migration seed ($subject)', function($subject) {
      $seeds = Migration::seed($subject);
      foreach ($seeds as $seed) {
         StandardIO::output($seed);
         usleep(25000);
      }
   });

   $cli->doCommand('dummy cache', function(){
      $cached = File::explore(Globals::get('base_path') . '/olimpus/cache');
      array_shift($cached);

      StandardIO::output(' ~ ' . count($cached) . ' ficheros en cache');

      $flag = Arguments::flag('dump');
      if($flag !== false) {
         foreach ($cached as $file) {
            $deleted = @unlink($file);
            if($deleted == false) {
               StandardIO::output(' [back_red]~ permiso denegado');
               return;
            }
         }

         StandardIO::output(' ~ El cache fue limpiado');
      }
   });

   $cli->doCommand('dummy error', function() {
      $flag = Arguments::flag('id');

      if($flag !== false) {
         $error = Arguments::get($flag);
         $info  = Error::search($error);
         StandardIO::output($info);
         return;         
      }

      $flag = Arguments::flag('dump');

      if($flag !== false) {
         $removed = Error::dump();

         if($removed === false) {
            StandardIO::output("   [back_red]permiso denegado");
            return;
         }

         StandardIO::output("   [back_green]Se limpio el registro de errores");
         return;
      }

      $list = Error::generateList();
      StandardIO::output($list);
   });

   $cli->doCommand('dummy trash', function(){
      $flag = Arguments::flag('remove-app');
      if($flag !== false) {
         StandardIO::output(' ~ Analizando...');
         $files = Trash::scan();

         if(empty($files)){
            StandardIO::output(' ~ Ningun archivo para eliminar...');
            return;
         }

         foreach ($files as $file) {
            StandardIO::output("[bold_red]   $file");
            usleep(25000);
         }

         StandardIO::output(' ~ ' . count($files) . " archivos para mover a la basura");
         StandardIO::output(" ~ Mover a papelera? [bold_blue][s/N] ", null, false);

         $option = strtolower(StandardIO::input());
         if($option != 's')
            return;

         StandardIO::output("\n   Se almacenara un respaldo en papelera");
         StandardIO::output("   ingresa un nombre para dicho respaldo");
         StandardIO::output("\n ~ Nombre de respaldo (opcional): ", null, false);

         $input = StandardIO::input();
         $backup_name = $input != '' ? $input : Random::string(6);

         $backup = Trash::remove($files, $backup_name);

         StandardIO::output(" ~ Backup en $backup");
         StandardIO::output(" ~ Ficheros de aplicacion removidos");
         return;
      }

      $flag = Arguments::flag('backup');
      if($flag !== false) {
         $name = Arguments::get($flag);
         if($name === null){
            StandardIO::output(' [back_red]~ Indica un nombre');
            return;
         }

         StandardIO::output(" ~ Restaurando el backup [bold_blue]$name");

         $force_restore = Arguments::flag('force-restore');
         $restore = Trash::restore($name, $force_restore);

         if($restore === false) {
            StandardIO::output(" [back_red]~ El respaldo $name no existe");
            return;
         }

         extract($restore);
         StandardIO::output(" $count archivos para restaurar...");

         foreach ($files['restored'] as $file) {
            StandardIO::output("[bold_green] ~ $file ... Restaurado");
            usleep(25000);
         }

         foreach ($files['to_overwrite'] as $file) {
            StandardIO::output("[bold_yellow] ~ $file ... Ya existe");
            usleep(25000);
         }

         foreach ($files['missing'] as $file) {
            StandardIO::output("[bold_red] ~ $file ... Sin respaldo");
            usleep(25000);
         }

         if(!empty($files['to_overwrite'])) {
            StandardIO::output(" [bold_red]~ Algunos archivos no fueron restaurados");
            StandardIO::output(" [bold_red]~ Intenta con trash --force-restore");
         }

         if(!empty($files['missing'])) {
            StandardIO::output(" [bold_red]~ Algunos archivos de respaldo fueron eliminados, ya no se podra restaurar por completo");
         }

         return;
      }

      #sin ninguna bandera solo lista los backups
      StandardIO::output(" ~ Lista de respaldos en la papelera");
      $backups = Trash::getBackupsList();

      if(empty($backups))
         StandardIO::output(" ~ Sin respaldos");

      foreach ($backups as $backup => $data) {
         $files = $data['meta']['count'];
         $date  = TimeDiff::getTimeAgo($data['meta']['date']);
         StandardIO::output("   Backup [bold_blue]$backup [bold_white]$files archivos hace $date");
      }
   });

   $cli->doCommand('default', function() {
      $flag = Arguments::flag('help');
      if($flag !== false) {
         $help = file_get_contents('olimpus/system/cli_help');
         StandardIO::output($help);
         return;
      }

      $flag = Arguments::flag('version');
      if($flag !== false) {
         $info = file_get_contents('olimpus/system/info');
         StandardIO::output($info);
         return;
      }

      $flag = Arguments::flag('about');
      if($flag !== false) {
         $about = file_get_contents('olimpus/system/about');
         StandardIO::output($about);
         return;
      }

      $flag = Arguments::flag('update');
      if($flag !== false) {
         $advice = file_get_contents('olimpus/system/update_advice');
         StandardIO::output($advice);
         return;
      }

      $command = Arguments::get(0);
      StandardIO::output("   [back_red]Comando $command invalido");
      StandardIO::output("   [back_white]dummy --help para ver ayuda");
   });

   $cli->run();